import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import sortCards from '../utils';

interface FXCardProps {
    id: string;
    fromCurrency: string | undefined;
    toCurrency: string | undefined;
    fxRate: number;
    createdTimestamp: number;
    lastUpdatedTimestamp: number;
}

export interface FXCardListProps {
    storedCards : FXCardProps[];
    sortBy: 'createdTimestamp' | 'fxRate' | 'lastUpdatedTimestamp';
    sortOrderASC: boolean;
}

// Define the initial state using that type
export const initialState: FXCardListProps = {
    storedCards:[],
    sortBy: 'createdTimestamp',
    sortOrderASC: true,
};

const fxCardListSlice = createSlice({
  name: 'fxCardList',
  initialState,
  reducers: {
    resetStoredCards: (state) => {
        state.storedCards = [];
    },
    addNewCard: (state, action: PayloadAction<FXCardProps>) => {
      state.storedCards.push(action.payload);
      sortCards(state);
    },
    removeCard: (state, action: PayloadAction<string>) => {
       state.storedCards = state.storedCards.filter(card => card.id !== action.payload);
    },
    reverseCardDetails: (state, action: PayloadAction<string>) => {
        const cardDetails = state.storedCards.find(card => card.id === action.payload);
        
        if (cardDetails) {
            const newRate = (1 / (cardDetails.fxRate || 1));
            const updatedCard = {
                ...cardDetails,
                fromCurrency: cardDetails.toCurrency,
                toCurrency: cardDetails.fromCurrency,
                fxRate: newRate,
                lastUpdatedTimestamp: Date.now(),
            };
    
            // Replace the original card with the updated card
            const index = state.storedCards.findIndex(card => card.id === action.payload);
            if (index !== -1) {
                state.storedCards[index] = updatedCard;
            }
        }
        sortCards(state);
    },
    updateSorting: (state, action) => {
      if(state.sortBy === action.payload){
        state.sortOrderASC = !state.sortOrderASC;
      }
      else {
        state.sortBy = action.payload;
        state.sortOrderASC = true;
      }
      sortCards(state);
    },
    updateCardDetails: (state, action) => {
        const cardDetails = state.storedCards.find(card => card.id === action.payload.id);

       if (cardDetails) {
        const updatedCard = {
            ...cardDetails,
            fxRate: action.payload.fxRate,
            lastUpdatedTimestamp: Date.now()
        };
        // Replace the original card with the updated card
        const index = state.storedCards.findIndex(card => card.id === action.payload.id);
        if (index !== -1) {
            state.storedCards[index] = updatedCard;
        }
      }
      sortCards(state);
    }
  },
});


export const fxCardListSelector = (state: any) => state.fxCardList.storedCards;
export const fxCardSortBySelector = (state: any) => state.fxCardList.sortBy;
export const fxCardSortOrderSelector = (state: any) => state.fxCardList.sortOrderASC;

// Export the actions generated by createSlice
export const { resetStoredCards, addNewCard, removeCard, reverseCardDetails, updateSorting, updateCardDetails } = fxCardListSlice.actions;

// Export the reducer to be used in the store
export default fxCardListSlice.reducer;
